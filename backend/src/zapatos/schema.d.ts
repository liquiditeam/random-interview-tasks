/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **dogs**
   * - Table in database
   */
  export namespace dogs {
    export type Table = 'dogs';
    export interface Selectable {
      /**
      * **dogs.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **dogs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
    }
    export interface JSONSelectable {
      /**
      * **dogs.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **dogs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
    }
    export interface Whereable {
      /**
      * **dogs.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dogs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **dogs.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **dogs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **dogs.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **dogs.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'dog_details_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = dogs.Table | schema_migrations.Table;
  export type Selectable = dogs.Selectable | schema_migrations.Selectable;
  export type JSONSelectable = dogs.JSONSelectable | schema_migrations.JSONSelectable;
  export type Whereable = dogs.Whereable | schema_migrations.Whereable;
  export type Insertable = dogs.Insertable | schema_migrations.Insertable;
  export type Updatable = dogs.Updatable | schema_migrations.Updatable;
  export type UniqueIndex = dogs.UniqueIndex | schema_migrations.UniqueIndex;
  export type Column = dogs.Column | schema_migrations.Column;
  export type AllBaseTables = [dogs.Table, schema_migrations.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [dogs.Table, schema_migrations.Table];


  export type SelectableForTable<T extends Table> = {
    dogs: dogs.Selectable;
    schema_migrations: schema_migrations.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    dogs: dogs.JSONSelectable;
    schema_migrations: schema_migrations.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    dogs: dogs.Whereable;
    schema_migrations: schema_migrations.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    dogs: dogs.Insertable;
    schema_migrations: schema_migrations.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    dogs: dogs.Updatable;
    schema_migrations: schema_migrations.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    dogs: dogs.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    dogs: dogs.Column;
    schema_migrations: schema_migrations.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    dogs: dogs.SQL;
    schema_migrations: schema_migrations.SQL;
  }[T];

}
